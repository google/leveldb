/*
 * @Author: yangxuan
 * @Date: 2022-03-08 09:01:34
 * @LastEditTime: 2022-03-09 09:30:02
 * @LastEditors: yangxuan
 * @Description: 定义了一系列与数据库操作相关的选项参数类型，
 * 例如与数据库操作相关的Options，
 * 与读操作相关的ReadOptions，
 * 与写操作相关的WriteOptions
 * @FilePath: /leveldb/include/leveldb/options.h
 */
// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <cstddef>

#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
// 数据存储落盘压缩方法，可选
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression = 0x0,
  kSnappyCompression = 0x1
};

// Options to control the behavior of a database (passed to DB::Open)
// Options主要在DB::Open方法中进行函数的参数传递。这是一个struct类型的变量，
// 其内部参数可以分为两块：影响行为的参数与影响性能的参数
struct LEVELDB_EXPORT Options {
  // Create an Options object with default values for all fields.
  Options();

  // ------------------- 以下是影响行为的参数 -----------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  // 比较器，用于定义table中key按照何种规则进行排序。如果不对这个参数进行指定，
  // 则默认按照字典顺序的比较器定义，即前面所讲的BytewiseComparatorImpl。
  // 在实际调用时，客户端需要保证排序时所使用的comparator
  // 与数据库进行 Open 操作时传入的comparator名字相同
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  // 默认为false，如果设置为true，表示当数据库不存在时，如果调用Open方法则创建新的数据库
  bool create_if_missing = false;

  // If true, an error is raised if the database already exists.
  // 默认为false，如果设置为true，则在进行Open操作时，
  // 首先判断该数据库是否存在，如果存在则触发一个错误
  bool error_if_exists = false;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  // 默认为false。如果设置为true，将会对数据进行大量的检测工作，如果检测到任何错误，
  // 则会停止检测。这样会造成某些不可预见的后果，例如数据库中的某一个数据实体的错误
  // 将造成大量的数据实体不可读，或整个数据库不能打开
  bool paranoid_checks = false;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  // 环境变量，主要用于与系统环境进行交互，如读文件、写文件、
  // 调度后台线程任务等。Env的默认值为Env::Default()。
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  // 如果不为NULL，则运行时产生的中间过程或错误信息会被写入到info_log中；
  // 如果为NULL，则会将这些信息存储在与DB相同路径下的目录中。
  Logger* info_log = nullptr;

  // ------------------- 以下是影响性能的参数 -------------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  // 内存中将要写入到硬盘文件（sorted on-disk file）的buffer数据量大小，默认为4MB。
  // 该参数增大，则会提升性能，特别是在大bulk load 中。内存中最多同时保存2个写缓存。
  // 此外，写缓存越大，则DB在下次打开过程中恢复的时间越长。
  size_t write_buffer_size = 4 * 1024 * 1024;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  // DB所能使用的最大打开文件数。如果在应用场景中有一个大的数据集，则可以增大该参数。该参数默认为1000
  int max_open_files = 1000;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).
  // 块是数据存储在硬盘的基本单位，也是从硬盘中读取数据的基本单位。

  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  // 数据库的缓存，默认为NULL，LevelDB自动创建并使用8MB的缓存。如果不为空，则由用户指定相对应的block缓存。
  // 在rocksDB中有LRU 和 CLOCK cache
  Cache* block_cache = nullptr;

  // Approximate(近似) size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed（未压缩） data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  // 用户数据每一个block的大小，默认为4KB。block size参数针对的是没有压缩的数据。
  // 如果使用了压缩功能，则实际每个单位block从硬盘中读取的数据大小可能会较小。这个参数可以进行动态修改
  size_t block_size = 4 * 1024;

  // Number of keys between restart points for delta encoding(查分编码) of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  // 大多数客户端无需关注
  // TODO: 实际上是干什么用的？
  int block_restart_interval = 16;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  // 默认为2MB。指定LevelDB向一个文件写入字节的最大值。一般用户不需要关注这个参数
  // 然而，如果用户的文件系统可以支持大的文件，可以考虑增大该参数值。
  // 但增大该参数，会增加压缩与等待间隔的时间。
  // 如果你本身就需要操作一个大数据库，也可以适当增大该参数值。
  size_t max_file_size = 2 * 1024 * 1024;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  // 数据落盘，入库的压缩算法，可以参考上面的压缩算法枚举。这个压缩算法是可以动态修改的。
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.（轻量且快速的压缩算法）
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  // 从实际应用上来看，Snappy的压缩速度可显著快于目前磁盘的存储速度，
  // 因此一般情况下应该开启压缩模式。如果输入数据不可压缩，Snappy也可以有效地检测并转换到非压缩模式
  CompressionType compression = kSnappyCompression;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  // 如果reuse_logs为true，将会继续利用已有的Manifest和Log文件进行添加，从而加速数据库的Open操作.
  // TODO:搞清楚是怎么个用法。
  // Default: currently false, but may become true later.
  bool reuse_logs = false;

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  const FilterPolicy* filter_policy = nullptr;
};

// Options that control read operations
struct LEVELDB_EXPORT ReadOptions {
  ReadOptions() = default;

  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  bool verify_checksums = false;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  bool fill_cache = true;

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  const Snapshot* snapshot = nullptr;
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
  WriteOptions() = default;

  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  bool sync = false;
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
