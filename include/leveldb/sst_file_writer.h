//  Copyright (c) 2011-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under both the GPLv2 (found in the
//  COPYING file in the root directory) and Apache 2.0 License
//  (found in the LICENSE.Apache file in the root directory).

// Copyright (c) 2020 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_SST_FILE_WRITER_H_
#define STORAGE_LEVELDB_INCLUDE_SST_FILE_WRITER_H_

#include <memory>
#include <string>

#include "leveldb/env.h"
#include "leveldb/options.h"
#include "leveldb/slice.h"

namespace leveldb {

// ExternalSstFileInfo include information about sst files created
// using SstFileWriter.
struct ExternalSstFileInfo {
  std::string file_path;              // external sst file path
  std::string smallest_internal_key;  // smallest internal key in file
  std::string largest_internal_key;   // largest internal key in file
  uint64_t file_size = 0;             // file size in bytes
  uint64_t num_entries = 0;           // number of entries in file
};

// SstFileWriter is used to create sst files that can be added to database later
// All keys in files generated by SstFileWriter will have sequence number = 0.
class SstFileWriter {
 public:
  SstFileWriter(const Options& options);

  ~SstFileWriter();

  // Prepare SstFileWriter to write into file located at "file_path".
  Status Open(const std::string& file_path);

  // Add a Put key with value to currently opened file
  // REQUIRES: key is after any previously added key according to comparator.
  Status Put(const Slice& user_key, const Slice& value);

  // Add a deletion key to currently opened file
  // REQUIRES: key is after any previously added key according to comparator.
  Status Delete(const Slice& user_key);

  // Finalize writing to sst file and close file.
  //
  // An optional ExternalSstFileInfo pointer can be passed to the function
  // which will be populated with information about the created sst file.
  Status Finish(ExternalSstFileInfo* file_info = nullptr);

  // Return the current file size.
  uint64_t FileSize() const;

 private:
  struct Rep;
  std::unique_ptr<Rep> rep_;
};

}  // namespace leveldb

#endif // STORAGE_LEVELDB_INCLUDE_SST_FILE_WRITER_H_
